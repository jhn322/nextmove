// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(cuid()) @map("_id")
  name          String?
  email         String     @unique
  password      String?    // Make password optional for OAuth users
  image         String?    // Profile image URL
  emailVerified DateTime?  // Required for NextAuth
  role          UserRole   @default(USER)
  accounts      Account[]  // Required for NextAuth
  sessions      Session[]  // Required for NextAuth
  countryFlag   String?    // User's selected country flag identifier
  flair         String?    // User's selected flair icon/emoji
  pieceSet      String?    // User's selected chess piece set identifier
  games         Game[]     // Add relation to Game model
  timezone      String?    @default("UTC") // User's selected timezone (e.g., "Europe/London")
  clockFormat   String?    @default("24")  // User's selected clock format ("12" or "24")
  elo Int @default(600) // User's ELO rating
  firstName           String? // User's first name
  lastName            String? // User's last name
  location            String? // User's location
  preferredDifficulty String? @default("intermediate") // User's preferred bot difficulty
  soundEnabled        Boolean? @default(true) // Game sound preference
  whitePiecesBottom   Boolean? @default(true) // Board orientation preference
  showCoordinates     Boolean? @default(true) // Board coordinates preference
  enableAnimations    Boolean? @default(true) // Game animations preference
  enableConfetti      Boolean? @default(true) // Victory confetti preference
  highContrast        Boolean? @default(false) // High contrast accessibility mode
  autoQueen           Boolean? @default(false) // Auto promote to queen on pawn promotion
  moveInputMethod     String? @default("both") // Move input method: click, drag, or both
  boardTheme          String? @default("auto") // Board theme/color preference
  enablePreMadeMove   Boolean? @default(true) // Enable pre-made move feature
  showLegalMoves      Boolean? @default(true) // Show legal moves on board
  highlightSquare     Boolean? @default(true) // Highlight last move/square
  prestigeLevel       Int     @default(0) // Number of times user has completed the full bot challenge
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  passwordResetTokens PasswordResetToken[] // Relation to PasswordResetToken model
  emailVerificationTokens EmailVerificationToken[] // Relation to EmailVerificationToken model
  wordleAttempts WordleAttempt[] // Relation to WordleAttempt model
}

// NextAuth required models
model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")  
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(cuid()) @map("_id")
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordResetToken {
  id        String   @id @default(cuid()) @map("_id")
  userId    String
  token     String   @unique // Store a hash of the actual token
  expires   DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// New model specifically for our custom email verification flow
model EmailVerificationToken {
  id        String   @id @default(cuid()) @map("_id")
  userId    String
  token     String   @unique // Store a hash of the actual token
  expires   DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId]) // Index for quicker lookups by userId if needed
}

enum UserRole {
  USER
  ADMIN
}

model Game {
  id           String   @id @default(cuid()) @map("_id")
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  opponent     String   // Name of the bot opponent
  result       String   // "win", "loss", "draw", "resign"
  difficulty   String   // e.g., "beginner", "intermediate", "advanced"
  movesCount  Int      @map("moves_count")
  timeTaken    Int      @map("time_taken") // Time in seconds or milliseconds? Assuming seconds for now.
  fen          String   // FEN string of the final position
  createdAt    DateTime @default(now()) @map("date") // Use createdAt to represent the game date
  eloDelta     Int?     @map("elo_delta")   // ELO change 
  newElo       Int?     @map("new_elo")     // New ELO 
  prestigeLevel Int     @default(0) // Prestige level this game was played during

  @@index([userId, createdAt]) // Index for fetching user game history efficiently
}

// Model for tracking Chess Wordle attempts
model WordleAttempt {
  id           String   @id @default(cuid()) @map("_id")
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  targetWord   String   @map("target_word")
  guessesTaken Int      @map("guesses_taken")
  isWin        Boolean  @map("is_win")
  playedAt     DateTime @default(now()) @map("played_at")

  @@index([userId, playedAt]) // Index for fetching user Wordle history
}


